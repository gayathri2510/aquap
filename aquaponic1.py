# -*- coding: utf-8 -*-
"""Aquaponic1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bdmSJ3_xoL2i9NFynubTStexD-X1LMls
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df=pd.read_csv("/content/drive/MyDrive/dataset/Pond0(1).csv")

df.head()

df.isnull().sum()

df=df.dropna(axis=0,how="any",inplace=False)

df.isnull().sum()

corr=df.corr()

import seaborn as sns

plt.figure(figsize=(12,10))
sns.heatmap(corr, annot=True, cmap=plt.cm.Blues)
plt.show()

df=df.drop(["min","sec"],axis=1)

df=df.drop(["year"],axis=1)

corr1=df.corr()

plt.figure(figsize=(12,10))
sns.heatmap(corr1, annot=True, cmap=plt.cm.Blues)
plt.show()

df=df.drop(["hours","date","Temperature (C)"],axis=1)

corr2=df.corr()

plt.figure(figsize=(12,10))
sns.heatmap(corr2, annot=True, cmap=plt.cm.Blues)
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error

def df_predict(df, row):
  n_col = df.shape[1]
  col = [i for i in range(n_col)]
  #row is for predicting which row 
  y = df.iloc[:,row]
  # printüëç
  col.pop(row)
  X=df.iloc[:,col]
  # print(X)
  x_train, x_test, y_train, y_test = train_test_split(X, y,test_size = 0.3,random_state = 1)
  # print(x_train, x_test, y_train, y_test)
  model = LinearRegression()
  model.fit(x_train,y_train)
  print("\nModel trained")
  Pred = model.predict(x_test)
  print(f"\nPredicting column {df.columns[row]}")
  # for i in range(Pred.shape[0]):
  #   print(y_test.to_numpy()[i],Pred[i],'\n')
  r2 = r2_score(y_test,Pred)
  print(f"R2 score will be {r2}")
  m = mean_absolute_error(y_test,Pred)
  print(f"MAE will be {m}")

df_predict(df,6)

df_predict(df,5)

for i in range(0,8):
  df_predict(df,i)

df.head()

x=df.drop(["Nitrate(g/ml)"],axis=1)
y=df.loc[:,"Nitrate(g/ml)"]

x.head()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)

from sklearn.ensemble import RandomForestRegressor
rf=RandomForestRegressor()
rf.fit(x_train,y_train)
y_pred=rf.predict(x_test)

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error

print("MAE:",mean_absolute_error(y_test,y_pred))
print("MSE:",mean_squared_error(y_test,y_pred))
print("R2 score",r2_score(y_test,y_pred))
print("RMSE",np.sqrt(mean_squared_error(y_test,y_pred)))

